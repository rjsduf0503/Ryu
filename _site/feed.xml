<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="https://rjsduf0503.github.io/Ryu_Blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rjsduf0503.github.io/Ryu_Blog/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-10-19T02:00:23+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/feed.xml</id><title type="html">Ryu’s Blog</title><subtitle>Coding, Diary, Studying etc..</subtitle><author><name>Geonyeol Ryu</name></author><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 숫자 짝꿍)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/19/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%88%AB%EC%9E%90-%EC%A7%9D%EA%BF%8D.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 숫자 짝꿍)" /><published>2022-10-19T00:00:00+09:00</published><updated>2022-10-19T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/19/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%88%AB%EC%9E%90%20%EC%A7%9D%EA%BF%8D</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/19/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%88%AB%EC%9E%90-%EC%A7%9D%EA%BF%8D.html"><![CDATA[<h1 id="프로그래머스-level-1숫자-짝꿍">프로그래머스 LEVEL 1(숫자 짝꿍)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/196216691-3aedbda5-63d2-4fc4-a65e-58151ecb4658.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-19</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>처음에 X, Y에 중첩된 값을 찾을 때 splice()로 제거하였는데, 시간이 오래 걸리는 문제 발생</li>
      <li>Map() 자료구조를 활용하여 map_x을 돌며 map_y에 key가 존재할 때 arr에 push()</li>
      <li>arr이 빈 경우 ‘-1’, arr이 ‘0’으로만 이루어진 경우 ‘0’ 반환</li>
      <li>그 외의 경우 내림차순 정렬 후 join() 수행</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>x</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">map_x</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">map_y</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
        
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">x</span> <span class="k">of</span> <span class="nx">X</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">map_x</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">map_x</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">?</span> <span class="nx">map_x</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">y</span> <span class="k">of</span> <span class="nx">Y</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">map_y</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span> <span class="nx">map_y</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="p">?</span> <span class="nx">map_y</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
        
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">]</span> <span class="k">of</span> <span class="nx">map_x</span><span class="p">.</span><span class="nx">entries</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">map_y</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">map_y</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">key</span><span class="p">));</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
        
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">-1</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">e</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">))</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">);</span>
        
    <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 1(숫자 짝꿍)]]></summary></entry><entry><title type="html">프로그래머스 데브코스 TIL Day 2</title><link href="https://rjsduf0503.github.io/Ryu_Blog/programmers/2022/10/18/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%8D%B0%EB%B8%8C%EC%BD%94%EC%8A%A4-TIL-Day-2.html" rel="alternate" type="text/html" title="프로그래머스 데브코스 TIL Day 2" /><published>2022-10-18T00:00:00+09:00</published><updated>2022-10-18T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/programmers/2022/10/18/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%20%EB%8D%B0%EB%B8%8C%EC%BD%94%EC%8A%A4%5D%20TIL%20Day%202</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/programmers/2022/10/18/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%8D%B0%EB%B8%8C%EC%BD%94%EC%8A%A4-TIL-Day-2.html"><![CDATA[<p><img src="https://capsule-render.vercel.app/api?type=waving&amp;color=auto&amp;height=300&amp;section=header&amp;text=Today%20I%20Learned...&amp;fontAlign=30&amp;fontAlignY=30&amp;fontSize=55&amp;desc=Programmers%20Devcourse%203rd&amp;descAlign=80&amp;descAlignY=55" alt="header" /></p>

<h1 id="day-2---20221018">Day 2 - 2022/10/18</h1>
<h2 id="새롭게-알게된-점">💡 새롭게 알게된 점</h2>
<h3 id="함수형-프로그래밍">함수형 프로그래밍</h3>
<h4 id="함수형-패러다임">함수형 패러다임</h4>
<p>프로그램은 순차, 분기, 반복, 참조로 구성되고, 패러다임은 이 4가지 요소를 어떻게 이용할 것인가를 다룬다.</p>
<ul>
  <li>객체지향 추상화의 최소 단위가 객체인 것처럼 <strong>함수형은 함수가 최소 단위 → 재사용성이 높다!</strong></li>
  <li>불변성을 지향하기에 동작 예측이 쉽고 사이드 이펙트를 방지 → 쓰레드 등을 통한 동시성 문제를 해결할 수 있다.</li>
  <li>객체지향은 <strong>제어 흐름의 간접적인 전환</strong>에 부과되는 규율이다.</li>
  <li>함수형은 <strong>변수 할당</strong>에 부과되는 규율이다.</li>
</ul>

<h4 id="함수형-프로그래밍의-장단점">함수형 프로그래밍의 장단점</h4>
<p><strong>장점</strong></p>
<ul>
  <li>상태가 없기 때문에 사이드 이펙트가 없다.</li>
  <li>함수 단위로 나눠지기 때문에 재사용성이 높다.</li>
  <li>함수의 조합을 통해 코드가 짧고 간결하다.</li>
</ul>

<p><strong>단점</strong></p>
<ul>
  <li>상태가 없다는 뜻은 변수 조작이 안된다는 뜻이므로 다른 방법(수정 후 복사한 다음 기존 값과 교체)을 사용해야 한다. → 쓸데없는 메모리와 성능 사용하는 문제점을 가진다.</li>
  <li>높은 재사용성을 위해 함수를 작게 쪼개야 한다. → 쪼개진 함수가 많아져서 복잡성 증가하는 문제점이 발생한다.</li>
  <li>코드를 짧고 간결하게 작성하기 위해 높은 숙련도를 요구한다.</li>
</ul>

<p><br /></p>

<h3 id="선언형-프로그래밍">선언형 프로그래밍</h3>
<p><strong>선언형 프로그래밍</strong>이란 <strong>무엇을 해결해야 할지</strong>에 집중하고 해결 방법은 컴퓨터에게 위임하는 방법이다.</p>

<p><strong>Date Flow</strong>(Stateless, Recursion, Pipe) 방식으로 코드 작성 시 데이터의 제어 없이 필요한 함수만 조합하여 문제 해결이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
	<span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">itme</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">));</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="멀티-패러다임">멀티 패러다임</h3>
<p><strong>그렇다면 객체지향과 함수형으로 나눠서 각각 따로 사용해야 할까?</strong></p>

<p>각각의 장점을 극대화하여 사용하기 위해 객체 지향과 함수형으로 나눌 필요가 없다. → JavaScript는 <strong>멀티 패러다임</strong>이 가능하기 때문!</p>

<p><br /></p>

<h3 id="객체지향과-프로토타입">객체지향과 프로토타입</h3>
<h4 id="객체지향">객체지향</h4>
<p><strong>객체지향</strong>이란 객체 위주로 설계하고 프로그래밍하는 패러다임이다.</p>

<p>객체지향의 객체는 현실에 있는 것을 추상화한 것이다. (= 추상화의 최소 단위가 객체)</p>

<p>(추상이란? 사물이 지니고 있는 여러 측면 중 <strong>특정한 부분</strong>만 추출하여 보는 것)</p>

<p><strong>객체지향의 오해</strong></p>

<ol>
  <li>C언어에서 객체지향 프로그래밍이 불가능하다.
    <ul>
      <li><strong>Nope!</strong> 객체지향은 패러다임일 뿐 언어와는 관계가 없다.</li>
      <li>클래스가 없는 JavaScript에서는 프로토타입을 통해 객체지향을 표현할 수 있다.</li>
    </ul>
  </li>
  <li>패러다임에 우위가 있다. (객체지향 &gt; 절차지향)
    <ul>
      <li><strong>Nope!</strong> 만들어야 하는 프로그램에 따라 다르다. 간단한 프로그램은 절차지향 프로그래밍이, 복잡한 프로그램은 객체지향 프로그래밍이 효율적이다.</li>
    </ul>
  </li>
</ol>

<h4 id="프로토타입">프로토타입</h4>
<p>JavaScript에서 객체는 클래스 기반 언어처럼 속성과 행위를 정의할 수 있기 때문에 객체만 활용해도 객체지향 프로그래밍이 가능하다.</p>

<p><strong>그렇다면 프로토타입이 왜 필요할까?</strong></p>

<p>두 개의 인스턴스를 생성할 때 두 객체 모두 각각 메서드가 따로 정의되는데, 이 경우 같은 내용인데도 생성된 것이므로 메모리가 낭비될 수 있다! (예: getName, setName)</p>

<p>프로토타입을 이용하면 상위 객체를 참조할 수 있고 객체를 이용하여 새로운 객체를 추가적으로 만들어 나갈 수 있다.</p>

<p><strong>프로토 타입 사용의 예시</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">company</span><span class="p">,</span> <span class="nx">move</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">company</span> <span class="o">=</span> <span class="nx">company</span><span class="p">;</span>
	
	<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
	<span class="p">};</span>
	
	<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
	<span class="p">};</span>
<span class="p">}</span> 
</code></pre></div></div>

<p><strong>프로토 타입을 더 잘 사용하려면?</strong></p>
<ol>
  <li>상속 흉내내기 1 - 부모 객체를 이용하여 프로토타입 함수 정의하기
    <ul>
      <li>엄밀히 따지면 상속이 아니라 상위 객체에서 하위 객체를 조금 더 잘 만드는 방법이다.</li>
      <li>하위 객체로 만들 생성자 함수를 만든 후, 해당 생성자 함수의 프로토타입으로 상위 객체를 대입한다.</li>
      <li>이렇게 하면 상위 객체의 함수가 링크되어 그대로 이용할 수 있지만, 내부적으로 생성된 프로토타입 변수는 이용할 수 없다.</li>
      <li><strong>예시</strong>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">건열</span><span class="dl">'</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Korean</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{}</span>
<span class="nx">Korean</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">ryu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">류건열</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">kim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Korean</span><span class="p">(</span><span class="dl">'</span><span class="s1">김건열</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ryu</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 류건열</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">kim</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 건열</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>상속 흉내내기 2 - 부모 생성자 빌려쓰기
    <ul>
      <li>부모 생성자를 빌려쓴다면 변수도 그대로 담기게 되어 위에서의 문제점을 해결할 수 있다.</li>
      <li><strong>예시</strong>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">건열</span><span class="dl">'</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Korean</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">Korean</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="nx">Korean</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">ryu</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">류건열</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">kim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Korean</span><span class="p">(</span><span class="dl">'</span><span class="s1">김건열</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ryu</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 류건열</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">kim</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 김건열</span>
<span class="nx">kim</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span><span class="dl">'</span><span class="s1">박건열</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">kim</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 박건열</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Object.create - 기존 객체 재활용
    <ul>
      <li><strong>에시</strong>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ryu</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">류건열</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">getName</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">kim</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">ryu</span><span class="p">);</span>
<span class="nx">kim</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">김건열</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ryu</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 류건열</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">kim</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span> <span class="c1">// 김건열</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lee</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">);</span> <span class="c1">// {}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">kim</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">);</span> <span class="c1">// { name: '류건열', getName: [Function: getName] }</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h3 id="이벤트-루프">이벤트 루프</h3>
<p><strong>JavaScript는 Single Thread로 동작한다.</strong></p>

<p><img width="30%" src="https://user-images.githubusercontent.com/34560965/196454114-d89bd18c-c294-4f21-beab-f4a5405fefe7.png" /></p>

<p>실제로 위 그림처럼 JavaScript의 Call Stack은 하나만 존재한다.</p>

<p>그렇다면 브라우저에서 실행되는 스크립트는 어떻게 비동기적으로 불러오고 애니메이션을 실행할까? 어떤 원리로 애니메이션과 클릭 이벤트를 같이 처리할 수 있을까?</p>

<p>브라우저에 <strong>이벤트 루프</strong>라는 시스템이 있기 때문이다.</p>

<p><img width="40%" src="https://user-images.githubusercontent.com/34560965/196454205-868df681-6cdf-4423-baf4-07223062cdb8.png" /></p>

<p>위 그림처럼 이벤트 루프는 자바스크립트 엔진에 포함되어 있지 않기 때문에 자바스크립트의 기능이 아니고 브라우저나 node.js에서 자체적으로 관리한다.</p>

<p>위 그림 우측 상단의 Web API는 브라우저에서 제공하는 API이다.</p>

<p>Click과 같은 웹 이벤트나 Timer 등은 실행시킬 경우 브라우저에 위임된다.</p>

<p>보통 Web API는 콜백함수를 넘기는데, 이 콜백함수는 비동기작업이 끝나면 Task Queue에 넣어져 순차적으로 꺼내 Call Stack에 push된다.</p>

<p>그래서 이런 과정들은 멀티 쓰레드로 동작한다. 자바스크립트 엔진이 싱글 쓰레드일 뿐 브라우저는 멀티 쓰레드로 동작하기에 이런 과정들이 가능해진다.</p>

<p><br /></p>

<h3 id="모듈">모듈</h3>
<p>일반적으로 웹 사이트는 여러개의 자바스크립트로 이루어져 있다. 대부분의 스크립트 언어의 특징이지만, 자바스크립트는 파일들을 각각 별개의 프로그램으로 취급한다. 문제는 웹사이트가 점점 하는일이 많아짐에 따라 스크립트 파일도 크게 증가하게 되었다는 점이다.</p>

<p>예전 자바스크립트는 스크립트 파일간 통신을 위해 전역 스코프에 존재하는 변수와 함수를 사용해야 했다. 즉시 스코프를 활용하여 전역 스코프가 오염되는 것을 어느정도 막을 수는 있었지만, 스크립트 파일간 의존도를 확인하기 힘들고 실행 순서를 제어해야 한다는 한계점이 있었다.</p>

<p>이런 불편한 점들 때문에 노드들이 등장했는데, 노드를 사용하면 스크립트간 의존도를 확인할 수 있고, 실행 순서를 쉽게 제어할 수 있게 된다.</p>

<p><strong>모듈과 컴포넌트의 비교</strong></p>

<p>모듈은 설계 시점에 의미있는 요소이고, 컴포넌트는 런타임 시점에 의미있는 요소이다. 즉, 모듈은 우리가 의식적으로 나눠놓은 요소이고, 컴포넌트는 나눠놓은 요소에 포함되어 실행되는 요소이다.</p>

<p><strong>모듈</strong></p>

<p>그런데 자바스크립트의 모듈은 직접적으로 런타임에 실행되는데, 왜 이름이 모듈일까?</p>

<p>자바스크립트는 파일 하나가 프로그램이기 때문으로 추측된다.</p>

<p>설계시 용어가 혼동되는 경우가 많기 때문에 디렉토리 단위를 모듈 개념에 가깝게 사용하는 경우가 많다.</p>

<p>모듈은 로컬 파일에서 동작하지 않고 HTTP 또는 HTTPS 프로토콜을 통해서만 동작하기 때문에 서버를 실행시킬 필요가 있다.</p>

<p><strong>모듈의 특징</strong></p>

<ol>
  <li>항상 엄격 모드(use strict)로 실행된다.
    <ul>
      <li>예를 들어, 일반 스크립트는 let이나 var를 생략하고 변수 선언이 가능해 전역 스코프에 저장되는 반면 모듈 스크립트는 엄격 모드로 실행되기 때문에 허용되지 않는다.</li>
    </ul>
  </li>
  <li>모듈 레벨 스코프가 있다.
    <ul>
      <li>모듈은 최상위에 변수를 선언하더라도, 전역 스코프에 올라가지 않고 자체적인 모듈 레벨 스코프에 올라간다. 일반 스크립트는 최상위에 선언하면 전역 스코프에 선언되어 다른 스크립트에서도 참조가 가능하지만, 모듈 스크립트에서는 import하지 않는 한 서로 참조가 불가능하다.</li>
    </ul>
  </li>
  <li>단 한 번만 평가된다.
    <ul>
      <li>여러번 import 되어도 실행은 단 한 번만 된다. 만약 내보내기를 하더라도 이미 평가된 것을 불러와서 사용하기만 할 뿐이다.</li>
    </ul>
  </li>
  <li>지연 실행된다.
    <ul>
      <li>일반 스크립트는 body 태그에 넣을 경우 순서에 따라 DOM이 생성되기 전에 실행될 수 있다. 하지만 모듈 스크립트는 defer 옵션을 넣지 않아도 자동으로 지연 실행이 되어 모든 DOM이 만들어진 후에 실행된다.</li>
    </ul>
  </li>
</ol>

<p>그러나 요즘에는 Webpack 등을 이용하여 번들링한 스크립트를 불러오면 모듈 스크립트를 사용할 일이 별로 없다.</p>

<hr />

<h2 id="️느낀점">❗️ 느낀점</h2>
<p>여태까지 공부하면서 얼핏 들어보거나 대충만 알고 있던 내용이 많았다.</p>

<p>2일차 강의를 수강하며 가장 크게 느낀점은 앞으로 모르거나 알아야할 것 같은 부분에 대한 학습을 진행할 때 나중에 편하게 다시 찾아보기 위함이나 기억에 더 잘 남을 수 있도록 블로그에 정리해야 겠다는 점이다.</p>

<p>특히 프로토타입 부분에서 두 객체를 생성할 때 따로 중복된 메소드가 생성되어 메모리가 낭비된다는 점이 흥미로웠다.</p>

<p>또 강사님께서 이벤트 루프에 대한 설명을 하실 때 이벤트 루프의 동작 과정에 대해 상세하게 설명해주셔서 이해하기 쉬웠다.</p>

<p>근데 또 적다보니 노션에 너무 많이 적어서 정리하는데 너무 힘듦..😢 요약하는 습관이 아직 안들여진 것 같다..</p>

<p>오늘도 고생했다👊</p>]]></content><author><name>류건열</name></author><category term="programmers" /><category term="cnu" /><category term="programmers" /><category term="dev-course" /><category term="javascript" /><category term="til" /><category term="today-i-learned" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 삼총사)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/18/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%82%BC%EC%B4%9D%EC%82%AC.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 삼총사)" /><published>2022-10-18T00:00:00+09:00</published><updated>2022-10-18T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/18/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%82%BC%EC%B4%9D%EC%82%AC</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/18/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%82%BC%EC%B4%9D%EC%82%AC.html"><![CDATA[<h1 id="프로그래머스-level-1삼총사">프로그래머스 LEVEL 1(삼총사)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/196182682-668b6817-ed23-4e8b-9081-d610159160c2.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-18</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>number 배열 속 3개의 원소를 가지는 조합 구하기</li>
      <li>조합 돌며 합이 0일 때 answer 증가</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>x</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getCombinations</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">num</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">v</span><span class="p">]);</span>

    <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">fixed</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">origin</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">rest</span> <span class="o">=</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">combinations</span> <span class="o">=</span> <span class="nx">getCombinations</span><span class="p">(</span><span class="nx">rest</span><span class="p">,</span> <span class="nx">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">attached</span> <span class="o">=</span> <span class="nx">combinations</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">fixed</span><span class="p">,</span> <span class="p">...</span><span class="nx">v</span><span class="p">]);</span>
        <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(...</span><span class="nx">attached</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">results</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">combinations</span> <span class="o">=</span> <span class="nx">getCombinations</span><span class="p">(</span><span class="nx">number</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">combination</span> <span class="k">of</span> <span class="nx">combinations</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">combination</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 1(삼총사)]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 보석 쇼핑)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/17/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%B3%B4%EC%84%9D-%EC%87%BC%ED%95%91.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 보석 쇼핑)" /><published>2022-10-17T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/17/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%B3%B4%EC%84%9D%20%EC%87%BC%ED%95%91</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/17/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%B3%B4%EC%84%9D-%EC%87%BC%ED%95%91.html"><![CDATA[<h1 id="프로그래머스-level-3보석-쇼핑">프로그래머스 LEVEL 3(보석 쇼핑)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/196179424-689bf0c7-d447-4582-bc29-e6d099393aac.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-17</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>처음에 start부터 end 인덱스 까지 slice()를 활용하여 자른 배열을 비교하였으나, 효율성 문제에 막힘</li>
      <li>Map() 자료구조를 활용하여 map의 size가 kind보다 작은 경우, end 증가 및 map에서 end 인덱스에 해당하는 값 1 증가</li>
      <li>같은 경우, 정답 배열보다 구간이 짧다면 업데이트, start 증가, map에서 start 인덱스에 해당하는 값 1 감소
        <ul>
          <li>이 때, 감소시킨 값이 0이 된다면 map에서 제거 (why? size 비교를 위해)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>Array.splice()나 Array.slice()도 Map().size와 똑같은 O(n)이지만, Map() 활용 시 중복 제거된 length 만큼만 돌기 때문에 훨씬 빠름</li>
      <li>효율성 테스트 통과하기 위해 Map() 자료구조를 활용하는 습관 들이기</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">gems</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">kind</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">(</span><span class="nx">gems</span><span class="p">).</span><span class="nx">size</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="nx">gems</span><span class="p">.</span><span class="nx">length</span><span class="p">];</span>
        
    <span class="kd">let</span> <span class="nx">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">([[</span><span class="nx">gems</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">]]);</span>

    <span class="k">while</span> <span class="p">(</span><span class="nx">end</span> <span class="o">&lt;</span> <span class="nx">gems</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nx">size</span> <span class="o">&lt;</span> <span class="nx">kind</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">map</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">gems</span><span class="p">[</span><span class="o">++</span><span class="nx">end</span><span class="p">]);</span>
            <span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">gems</span><span class="p">[</span><span class="nx">end</span><span class="p">],</span> <span class="nx">last</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="nx">last</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">answer</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">answer</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">end</span> <span class="o">-</span> <span class="nx">start</span><span class="p">)</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[</span><span class="nx">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
            <span class="kd">const</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">gems</span><span class="p">[</span><span class="nx">start</span><span class="o">++</span><span class="p">];</span>
            <span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">current</span><span class="p">,</span> <span class="nx">map</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">current</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">map</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">current</span><span class="p">))</span> <span class="nx">map</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
        
    <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 3(보석 쇼핑)]]></summary></entry><entry><title type="html">프로그래머스 데브코스 TIL Day 1</title><link href="https://rjsduf0503.github.io/Ryu_Blog/programmers/2022/10/17/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%8D%B0%EB%B8%8C%EC%BD%94%EC%8A%A4-TIL-Day-1.html" rel="alternate" type="text/html" title="프로그래머스 데브코스 TIL Day 1" /><published>2022-10-17T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/programmers/2022/10/17/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%20%EB%8D%B0%EB%B8%8C%EC%BD%94%EC%8A%A4%5D%20TIL%20Day%201</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/programmers/2022/10/17/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EB%8D%B0%EB%B8%8C%EC%BD%94%EC%8A%A4-TIL-Day-1.html"><![CDATA[<p><img src="https://capsule-render.vercel.app/api?type=waving&amp;color=auto&amp;height=300&amp;section=header&amp;text=Today%20I%20Learned...&amp;fontAlign=30&amp;fontAlignY=30&amp;fontSize=55&amp;desc=Programmers%20Devcourse%203rd&amp;descAlign=80&amp;descAlignY=55" alt="header" /></p>

<h1 id="day-1---20221017">Day 1 - 2022/10/17</h1>
<h2 id="새롭게-알게된-점">💡 새롭게 알게된 점</h2>
<h3 id="메모리">메모리</h3>
<ul>
  <li>자바스크립트 엔진은 Garbage Collector를 통해 메모리를 정리한다.</li>
  <li>가비지 콜렉터는 가비지 콜렉션이라는 자동 메모리 관리 알고리즘을 통해 만들어진 객체로, 사용하지 않는 메모리를 해제하는 역할을 맡고 있다.</li>
  <li>현대적인 브라우저의 가비지 콜렉터는 Mark and Sweep Algorithm을 통해 메모리를 정리
    <ul>
      <li>Mark and Sweep Algorithm 이란? 브라우저의 최상위 객체인 window에서 시작해 닿을 수 없는 주소를 더 이상 필요없는 주소로 정의하고 지우는 알고리즘이다</li>
    </ul>
  </li>
  <li>자바스크립트 엔진은 Virtual Machine으로 구성된다
    <ul>
      <li>Heap
        <ul>
          <li>참조 타입이 들어간다.</li>
          <li>동적으로 크기가 변한다. → 여기서 나오는 배열을 const로 선언해도 push()가 되는 이유: call stack에 할당된 메모리를 변경하는 것이 아닌 heap 메모리를 변경하는 것이기 때문</li>
        </ul>
      </li>
      <li>Call Stack
        <ul>
          <li>원시 타입이 들어간다.</li>
          <li>예) 배열을 선언 후 push()할 때
Call Stack에 arr = (0x008, 0xFFB) → Heap에 0xFFB, [5, 3, 1]</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="배열에서의-key-value-">배열에서의 key-value ?</h3>
<ul>
  <li>배열에서도 객체처럼 key-value 쌍을 추가할 수 있다.</li>
  <li>추가는 되지만, <b>배열의 길이는 변하지 않는다!</b>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// object</span>
<span class="nx">arr</span><span class="p">[</span><span class="dl">'</span><span class="s1">key</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">value</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr9</span><span class="p">);</span> <span class="c1">// [ 1, 2, 3, 4, 5, 6, key: 'value' ];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr9</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// expected 7 but 6</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="클로저-">클로저 ?</h3>

<h4 id="다음의-출력-결과는-무엇일까">다음의 출력 결과는 무엇일까?</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">function</span> <span class="nx">counting</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="p">},</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">counting</span><span class="p">();</span>
</code></pre></div></div>

<p>정답은 ‘5 5 5 5 5’</p>

<h4 id="why">Why?</h4>

<p>setTimeout의 대기 시간이 끝나 콜백 함수가 실행되는 시점에는 루프가 종료되어 i가 5가 되기 때문</p>

<h4 id="어떻게-해결할까">어떻게 해결할까?</h4>

<ol>
  <li>IIFE
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">function</span> <span class="nx">counting</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">for</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
       <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
           <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
               <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
               <span class="p">},</span> <span class="nx">number</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
           <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
       <span class="p">}</span>
   <span class="p">}</span>

   <span class="nx">counting</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>let 사용
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">function</span> <span class="nx">counting</span><span class="p">()</span> <span class="p">{</span>
       <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
           <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
               <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
           <span class="p">},</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
       <span class="p">}</span>
   <span class="p">}</span>

   <span class="nx">counting</span><span class="p">();</span>
        
   <span class="c1">// let은 블록 수준 스코프라 매 루프마다 클로저가 생성되기 때문</span>
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<h2 id="️느낀점">❗️ 느낀점</h2>

<p>자바스크립트에 대한 기초 강의이다 보니 대부분은 아는 내용이었지만, 새로 알게된 점과 상기된 점이 있었다.</p>

<p>특히 개발하거나 코딩 테스트 문제를 풀 때 변경할 일 없는 배열은 const로 생성하고, push() 및 pop() 등 배열의 요소를 변경할 수 있다는 점은 알고 있었는데, 그 정확한 이유는 궁금해 하지도 않고 찾아보지도 않았기 때문에 알리가 없었다. 1학년 때 자바 배우면서 얼핏 들었던 내용인 것 같은데 잘 기억나진 않는다..</p>

<p>또 위에 적었듯이, 클로저 부분 강의에서 setTimeout의 대기 시간이 끝나 콜백 함수가 실행되는 시점에는 루프가 종료되어 i가 전부 5가 되는 문제를 해결하는 방법 중 정의와 동시에 즉시 실행되는 함수인 IIFE(Immediately Invoked Function Expression)을 이용해 해결할 수 있다는 점이 굉장히 흥미로웠다.</p>

<p>첫 강의이다 보니 의욕이 앞서 수강하면서 모든 내용을 다 노션에 적고 필요한 것만 다시 옮겨서 정리했는데 앞으론 필요한 내용만 적는게 나을지도..😢</p>

<p>이제 첫 TIL인데 앞으로 약 5달 동안 이 마음가짐을 갖고 끝까지 쓸 수 있기를 기원하며..⭐️</p>

<p>화이팅👊</p>]]></content><author><name>류건열</name></author><category term="programmers" /><category term="cnu" /><category term="programmers" /><category term="dev-course" /><category term="javascript" /><category term="til" /><category term="today-i-learned" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 프렌즈4블록)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/16/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 프렌즈4블록)" /><published>2022-10-16T00:00:00+09:00</published><updated>2022-10-16T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/16/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/16/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%ED%94%84%EB%A0%8C%EC%A6%884%EB%B8%94%EB%A1%9D.html"><![CDATA[<h1 id="프로그래머스-level-2프렌즈4블록">프로그래머스 LEVEL 2(프렌즈4블록)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/196032962-4c559c06-8bd9-4105-9c47-27c49b61e37c.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-16</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>각 반복마다 board를 돌며 4블록인지 체크 후 정사각형이면 pop 배열에 push()</li>
      <li>pop 배열에 값이 있다면 하나씩 꺼내어 4블록 부분 board에서 공백(‘ ‘)값으로 변경</li>
      <li>위 아래 사이에 공백이 존재할 때 아래로 끌어 내림</li>
      <li>board를 돌 때 4블록이 존재하지 않는 경우 break</li>
      <li>board에 포함된 공백(‘ ‘) 값 return</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>4블록 제거 후 아래로 끌어 내리는 작업을 생각하는데에 시간이 소요됨</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">board</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">board</span> <span class="o">=</span> <span class="nx">board</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">row</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">row</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
    <span class="kd">const</span> <span class="nx">move</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]];</span>
    <span class="kd">const</span> <span class="nx">pop</span> <span class="o">=</span> <span class="p">[];</span>
        
    <span class="kd">const</span> <span class="nx">isSquare</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">move</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">board</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">board</span><span class="p">[</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">move</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">move</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]])</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
        
    <span class="kd">const</span> <span class="nx">removeSquare</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">board</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">move</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">board</span><span class="p">[</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">move</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">move</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
        
    <span class="kd">const</span> <span class="nx">pullToBottom</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">rest_column</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span> <span class="na">length</span><span class="p">:</span> <span class="nx">m</span> <span class="p">},</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nx">e</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">result_column</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span> <span class="na">length</span><span class="p">:</span> <span class="nx">m</span> <span class="o">-</span> <span class="nx">rest_column</span><span class="p">.</span><span class="nx">length</span> <span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">),</span> <span class="p">...</span><span class="nx">rest_column</span><span class="p">];</span>
            <span class="nx">result_column</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">e</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
            <span class="p">});</span>
        <span class="p">}</span>
    <span class="p">};</span>
        
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">isSquare</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">))</span> <span class="p">{</span>
                    <span class="nx">pop</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">])</span>    
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">pop</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            
        <span class="k">while</span> <span class="p">(</span><span class="nx">pop</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">removeSquare</span><span class="p">(...</span><span class="nx">pop</span><span class="p">.</span><span class="nx">pop</span><span class="p">());</span>
        <span class="p">}</span>
            
        <span class="nx">pullToBottom</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">board</span><span class="p">.</span><span class="nx">flat</span><span class="p">().</span><span class="nx">filter</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">e</span> <span class="o">===</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 2(프렌즈4블록)]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 연속 부분 수열 합의 개수)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/15/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%97%B0%EC%86%8D-%EB%B6%80%EB%B6%84-%EC%88%98%EC%97%B4-%ED%95%A9%EC%9D%98-%EA%B0%9C%EC%88%98.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 연속 부분 수열 합의 개수)" /><published>2022-10-15T00:00:00+09:00</published><updated>2022-10-15T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/15/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%97%B0%EC%86%8D%20%EB%B6%80%EB%B6%84%20%EC%88%98%EC%97%B4%20%ED%95%A9%EC%9D%98%20%EA%B0%9C%EC%88%98</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/15/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%97%B0%EC%86%8D-%EB%B6%80%EB%B6%84-%EC%88%98%EC%97%B4-%ED%95%A9%EC%9D%98-%EA%B0%9C%EC%88%98.html"><![CDATA[<h1 id="프로그래머스-level-2연속-부분-수열-합의-개수">프로그래머스 LEVEL 2(연속 부분 수열 합의 개수)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/195969073-3976f5d2-0e75-4d63-80ac-f1a4917a1c17.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-15</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>circular를 위해 elements 뒤에 elements를 붙임 - sequence (마지막 인덱스 제외)</li>
      <li>elements의 길이만큼 반복하며 (1, 2, …, n) slice()를 사용해 sequence를 잘라 합 push()</li>
      <li>마지막 인덱스는 한번만 수행하면 되기 때문에 for문 밖에서 따로 push()</li>
      <li>중복 제거를 위해 Set()으로 변경 후 size 반환</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>Set에 바로 add()</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">elements</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">const</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">elements</span><span class="p">,</span> <span class="p">...</span><span class="nx">elements</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
        
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">answer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">sequence</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="nx">j</span> <span class="o">+</span> <span class="nx">i</span><span class="p">).</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">answer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">elements</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        
    <span class="k">return</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Set</span><span class="p">(</span><span class="nx">answer</span><span class="p">)).</span><span class="nx">size</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 2(연속 부분 수열 합의 개수)]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 땅따먹기)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/14/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%95%85%EB%94%B0%EB%A8%B9%EA%B8%B0.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 땅따먹기)" /><published>2022-10-14T00:00:00+09:00</published><updated>2022-10-14T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/14/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%95%85%EB%94%B0%EB%A8%B9%EA%B8%B0</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/14/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%95%85%EB%94%B0%EB%A8%B9%EA%B8%B0.html"><![CDATA[<h1 id="프로그래머스-level-2땅따먹기">프로그래머스 LEVEL 2(땅따먹기)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/195561672-1a9663b3-91c5-4d71-9e02-defd47c4c60a.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-14</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>land를 돌며 0~3 인덱스까지 현재 인덱스를 제외한 나머지 인덱스의 최대값을 더함</li>
      <li>land의 마지막 인덱스에 최종값이 저장되므로 마지막 인덱스에서의 Math.max()를 구함</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>x</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">land</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">land</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]);</span>
        <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]);</span>
        <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">3</span><span class="p">]);</span>
        <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="nx">land</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span>
    <span class="p">}</span>
        
    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">land</span><span class="p">[</span><span class="nx">land</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 2(땅따먹기)]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 위장)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/13/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%9C%84%EC%9E%A5.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 위장)" /><published>2022-10-13T00:00:00+09:00</published><updated>2022-10-13T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/13/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%9C%84%EC%9E%A5</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/13/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EC%9C%84%EC%9E%A5.html"><![CDATA[<h1 id="프로그래머스-level-2위장">프로그래머스 LEVEL 2(위장)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/195002246-e97e287c-bfb3-4ab0-824d-9928337643dc.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-13</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>예전에 c++로 풀었던 문제를 다시 풀어 보았다.</li>
      <li>옷의 이름은 중요하지 않으므로 Map()을 이용해 종류 별 개수를 저장</li>
      <li>map을 돌며 종류 별 경우의 수 구함</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>x</li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">clothes</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
        
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">cloth</span> <span class="k">of</span> <span class="nx">clothes</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">kind</span><span class="p">]</span> <span class="o">=</span> <span class="nx">cloth</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">kind</span><span class="p">))</span> <span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">kind</span><span class="p">,</span> <span class="nx">map</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">kind</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">else</span> <span class="nx">map</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">kind</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">map</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">value</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">answer</span> <span class="o">+=</span> <span class="nx">value</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">*</span> <span class="nx">answer</span><span class="p">;</span>
    <span class="p">});</span>
        
    <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 2(위장)]]></summary></entry><entry><title type="html">알고리즘 문제 풀이(프로그래머스 - 다리를 지나는 트럭)</title><link href="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%8B%A4%EB%A6%AC%EB%A5%BC-%EC%A7%80%EB%82%98%EB%8A%94-%ED%8A%B8%EB%9F%AD.html" rel="alternate" type="text/html" title="알고리즘 문제 풀이(프로그래머스 - 다리를 지나는 트럭)" /><published>2022-10-12T00:00:00+09:00</published><updated>2022-10-12T00:00:00+09:00</updated><id>https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%8B%A4%EB%A6%AC%EB%A5%BC%20%EC%A7%80%EB%82%98%EB%8A%94%20%ED%8A%B8%EB%9F%AD</id><content type="html" xml:base="https://rjsduf0503.github.io/Ryu_Blog/algorithm/2022/10/12/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4_%EB%8B%A4%EB%A6%AC%EB%A5%BC-%EC%A7%80%EB%82%98%EB%8A%94-%ED%8A%B8%EB%9F%AD.html"><![CDATA[<h1 id="프로그래머스-level-2다리를-지나는-트럭">프로그래머스 LEVEL 2(다리를 지나는 트럭)</h1>

<p><img src="https://user-images.githubusercontent.com/34560965/194919623-5cd917ce-9eb7-4b00-b276-229bec38caa3.png" alt="image" /></p>

<ul>
  <li>
    <p>사용 언어 : javascript</p>
  </li>
  <li>
    <p>해결 날짜 : 2022-10-12</p>
  </li>
  <li>해결 방법 :
    <ul>
      <li>다리를 지나는 과정을 표현할 bridge 0으로 초기화</li>
      <li>while문 반복 시(반복 한 번당 1초를 의미) bridge의 최상단 pop()</li>
      <li>다리가 최대 견딜 수 있는 무게가 현재 지날 트럭의 무게와 현재 다리의 무게의 합보다 크거나 같으면 현재 지날 트럭을 bridge에 unshift() 및 무게 update</li>
      <li>그렇지 않으면 다리에 더 오를 수 없다는 뜻이므로 bridge에 0 unshift()</li>
    </ul>
  </li>
  <li>회고 :
    <ul>
      <li>while문 속 조건을 truck_weights.length로 주고 truck_weight.length 조건을 가진 if문을 삭제한 뒤 answer과 bridge_length(마지막에 건너는 차량의 소요 시간)의 합을 return해도 동일한 결과</li>
      <li>console문으로 현재 다리의 지나는 트럭을 시각화 하기 위해 아래 코드와 같이 작성함</li>
      <li><img src="https://user-images.githubusercontent.com/34560965/194919644-1058af1a-0a88-4a0c-ad07-f0bdba80db03.png" alt="image" /></li>
    </ul>
  </li>
  <li>
    <p>코드</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">bridge_length</span><span class="p">,</span> <span class="nx">weight</span><span class="p">,</span> <span class="nx">truck_weights</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">bridge</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="nx">bridge_length</span><span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">bridge_weight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">truck_weights</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span>
        
    <span class="k">while</span> <span class="p">(</span><span class="nx">bridge</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">bridge_weight</span> <span class="o">-=</span> <span class="nx">bridge</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
            
        <span class="k">if</span> <span class="p">(</span><span class="nx">truck_weights</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">truck_weights</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">weight</span> <span class="o">&gt;=</span> <span class="nx">current</span> <span class="o">+</span> <span class="nx">bridge_weight</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">bridge</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">truck_weights</span><span class="p">.</span><span class="nx">pop</span><span class="p">());</span>
                <span class="nx">bridge_weight</span> <span class="o">+=</span> <span class="nx">current</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="nx">bridge</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>
            
        <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges</li>
</ul>]]></content><author><name>류건열</name></author><category term="algorithm" /><category term="cnu" /><category term="algorithm" /><category term="self-study" /><category term="javascript" /><summary type="html"><![CDATA[프로그래머스 LEVEL 2(다리를 지나는 트럭)]]></summary></entry></feed>